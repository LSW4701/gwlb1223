AWSTemplateFormatVersion: "2010-09-09"

Metadata:
  "AWS::CloudFormation::Interface":
    ParameterGroups:
      - Label:
          default: "VPC Parameters"
        Parameters:
          - AvailabilityZoneA
          - AvailabilityZoneB
          - VPCCIDRBlock
          - PrivateSubnetABlock
          - PrivateSubnetBBlock
          - TGWSubnetABlock
          - TGWSubnetBBlock
          - InstanceType

Parameters:
  AvailabilityZoneA:
    Description: "Choose AZ1 for your VPC."
    Type: AWS::EC2::AvailabilityZone::Name
    Default: "ap-northeast-2a"

  AvailabilityZoneB:
    Description: "Choose AZ2 for your VPC."
    Type: AWS::EC2::AvailabilityZone::Name
    Default: "ap-northeast-2b"

  VPCCIDRBlock:
    Type: String
    Default: 10.2.0.0/16 # VPC02 CIDR
    Description: "The CIDR range for the VPC. This should be a valid private (RFC 1918) CIDR range."

  PrivateSubnetABlock:
    Type: String
    Default: 10.2.21.0/24 # VPC02 Subnet
    Description: "CidrBlock for AZ A private subnet A within the VPC"

  PrivateSubnetBBlock:
    Type: String
    Default: 10.2.22.0/24 # VPC02 Subnet
    Description: "CidrBlock for AZ B private subnet B within the VPC"
  
  TGWSubnetABlock:
    Type: String
    Default: 10.2.251.0/24 # VPC02 TGW Subnet
    Description: "CidrBlock for AZ A TGW subnet A within the VPC"

  TGWSubnetBBlock:
    Type: String
    Default: 10.2.252.0/24 # VPC02 TGW Subnet
    Description: "CidrBlock for AZ A TGW subnet A within the VPC"

  InstanceType:
    Type: String
    Default: t3.small
    Description: EC2 Instance Type for the VPC.

  LatestAmiId:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCIDRBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}'
        - Key: project
          Value: !Sub '${AWS::StackName}'

  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnetABlock
      AvailabilityZone: !Ref AvailabilityZoneA
      MapPublicIpOnLaunch: "true"
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PrivateSubnetA'

  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnetBBlock
      AvailabilityZone: !Ref AvailabilityZoneB
      MapPublicIpOnLaunch: "true"
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PrivateSubnetB'

  PrivateSubnetARouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Private-Subnet-A-RT'

  PrivateSubnetBRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Private-Subnet-B-RT'

  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA   
      RouteTableId: !Ref PrivateSubnetARouteTable

  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateSubnetBRouteTable

  TGWSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref TGWSubnetABlock
      AvailabilityZone: !Ref AvailabilityZoneA
      MapPublicIpOnLaunch: "true"
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-TGWSubnetA'

  TGWSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref TGWSubnetBBlock
      AvailabilityZone: !Ref AvailabilityZoneB
      MapPublicIpOnLaunch: "true"
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-TGWSubnetB'

  TGWSubnetARouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-TGW-Subnet-A-RT'

  TGWSubnetBRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-TGW-Subnet-B-RT'

  TGWSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref TGWSubnetA   
      RouteTableId: !Ref TGWSubnetARouteTable

  TGWSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref TGWSubnetB
      RouteTableId: !Ref TGWSubnetBRouteTable

  ServerRoleSSM:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-Case4-SSMRole'
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole

  InstanceProfileSSM:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles: 
        - Ref: ServerRoleSSM
        
  PrivateEC2SG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Open-up ports for ICMP and SSH,HTTP/S from All network
      GroupName: PrivateEC2SG
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: icmp
          CidrIp: 0.0.0.0/0
          FromPort: -1
          ToPort: -1
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 22
          ToPort: 22
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 80
          ToPort: 80
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 443
          ToPort: 443
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PrivateSG'

  SSMSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Open-up ports for HTTP/S from All network
      GroupName: SSMSG
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 80
          ToPort: 80
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 443
          ToPort: 443
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-SSMSG'

  PrivateAInstance1:
    Type: AWS::EC2::Instance
    DependsOn: PrivateSubnetA
    Properties:
      SubnetId: !Ref PrivateSubnetA
      ImageId: !Ref LatestAmiId
      PrivateIpAddress: 10.2.21.101 # VPC02 IP
      InstanceType: !Ref InstanceType
      SecurityGroupIds: 
        - Ref: PrivateEC2SG
      IamInstanceProfile: !Ref InstanceProfileSSM
      BlockDeviceMappings: 
        - DeviceName: /dev/xvda
          Ebs: 
            VolumeSize: 20
            VolumeType: gp3
            Iops: 3000
            DeleteOnTermination: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Private-A-10.2.21.101'
      UserData:
        Fn::Base64: |
          #!/bin/bash
          sudo yum -y update;
          sudo yum -y install yum-utils; 
          sudo yum -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm;
          sudo yum -y install iotop iperf3 iptraf tcpdump git bash-completion; 
          sudo yum -y install httpd php mysql php-mysql;
          sudo yum -y install python-pip;
          sudo yum -y install nethogs iftop lnav nmon tmux wireshark vsftpd ftp golang;
          sudo systemctl start httpd;
          sudo systemctl enable httpd;
          cd /var/www/html/;
          sudo git clone https://github.com/whchoi98/ec2meta-webpage.git;
          sudo systemctl restart httpd;
          git clone https://github.com/gcla/termshark.git;
          cd ~/termshark/;
          go get github.com/gcla/termshark/v2/cmd/termshark;
          cd ~;
          exit

  PrivateAInstance2:
    Type: AWS::EC2::Instance
    DependsOn: PrivateSubnetA
    Properties:
      SubnetId: !Ref PrivateSubnetA
      ImageId: !Ref LatestAmiId
      PrivateIpAddress: 10.2.21.102 # VPC02 IP
      InstanceType: !Ref InstanceType
      SecurityGroupIds: 
        - Ref: PrivateEC2SG
      IamInstanceProfile: !Ref InstanceProfileSSM
      BlockDeviceMappings: 
        - DeviceName: /dev/xvda
          Ebs: 
            VolumeSize: 20
            VolumeType: gp3
            Iops: 3000
            DeleteOnTermination: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Private-A-10.2.21.102'
      UserData:
        Fn::Base64: |
          #!/bin/bash
          sudo yum -y update;
          sudo yum -y install yum-utils; 
          sudo yum -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm;
          sudo yum -y install iotop iperf3 iptraf tcpdump git bash-completion; 
          sudo yum -y install httpd php mysql php-mysql; 
          sudo yum -y install python-pip;
          sudo yum -y install nethogs iftop lnav nmon tmux wireshark vsftpd ftp golang;
          sudo systemctl start httpd;
          sudo systemctl enable httpd;
          cd /var/www/html/;
          sudo git clone https://github.com/whchoi98/ec2meta-webpage.git;
          sudo systemctl restart httpd;
          git clone https://github.com/gcla/termshark.git;
          cd ~/termshark/;
          go get github.com/gcla/termshark/v2/cmd/termshark;
          cd ~;
          exit

  PrivateBInstance1:
    Type: AWS::EC2::Instance
    DependsOn: PrivateSubnetB
    Properties:
      SubnetId: !Ref PrivateSubnetB
      ImageId: !Ref LatestAmiId
      PrivateIpAddress: 10.2.22.101 # VPC02 IP
      InstanceType: !Ref InstanceType
      SecurityGroupIds: 
        - Ref: PrivateEC2SG
      IamInstanceProfile: !Ref InstanceProfileSSM
      BlockDeviceMappings: 
        - DeviceName: /dev/xvda
          Ebs: 
            VolumeSize: 20
            VolumeType: gp3
            Iops: 3000
            DeleteOnTermination: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Private-B-10.2.22.101'
      UserData:
        Fn::Base64: |
          #!/bin/bash
          sudo yum -y update;
          sudo yum -y install yum-utils; 
          sudo yum -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm;
          sudo yum -y install iotop iperf3 iptraf tcpdump git bash-completion; 
          sudo yum -y install httpd php mysql php-mysql; 
          sudo yum -y install python-pip;
          sudo yum -y install nethogs iftop lnav nmon tmux wireshark vsftpd ftp golang;
          sudo systemctl start httpd;
          sudo systemctl enable httpd;
          cd /var/www/html/;
          sudo git clone https://github.com/whchoi98/ec2meta-webpage.git;
          sudo systemctl restart httpd;
          exit

  PrivateBInstance2:
    Type: AWS::EC2::Instance
    DependsOn: PrivateSubnetB
    Properties:
      SubnetId: !Ref PrivateSubnetB
      ImageId: !Ref LatestAmiId
      PrivateIpAddress: 10.2.22.102 # VPC02 IP
      InstanceType: !Ref InstanceType
      SecurityGroupIds: 
        - Ref: PrivateEC2SG
      IamInstanceProfile: !Ref InstanceProfileSSM
      BlockDeviceMappings: 
        - DeviceName: /dev/xvda
          Ebs: 
            VolumeSize: 20
            VolumeType: gp3
            Iops: 3000
            DeleteOnTermination: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Private-B-10.2.22.102'
      UserData:
        Fn::Base64: |
          #!/bin/bash
          sudo yum -y update;
          sudo yum -y install yum-utils; 
          sudo yum -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm;
          sudo yum -y install iotop iperf3 iptraf tcpdump git bash-completion; 
          sudo yum -y install httpd php mysql php-mysql; 
          sudo yum -y install python-pip;
          sudo yum -y install nethogs iftop lnav nmon tmux wireshark vsftpd ftp golang;
          sudo systemctl start httpd;
          sudo systemctl enable httpd;
          cd /var/www/html/;
          sudo git clone https://github.com/whchoi98/ec2meta-webpage.git;
          sudo systemctl restart httpd;
          exit

  SSMEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssm"
      VpcEndpointType: Interface
      PrivateDnsEnabled: True
      SubnetIds: 
        - Ref: PrivateSubnetA
        - Ref: PrivateSubnetB
      SecurityGroupIds:
        - Ref: SSMSG

  SSMMEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssmmessages"
      VpcEndpointType: Interface
      PrivateDnsEnabled: True
      SubnetIds: 
        - Ref: PrivateSubnetA
        - Ref: PrivateSubnetB
      SecurityGroupIds:
        - Ref: SSMSG

Outputs:
  VpcId:
    Description: The ID of the VPC
    Value: !Ref VPC
    Export:
      Name: !Sub "${AWS::StackName}-VpcId"

  VpcCIDR:
    Description: The CIDR Block of the VPC
    Value: !Ref VPCCIDRBlock
    Export:
      Name: !Sub "${AWS::StackName}-VpcCIDR"

  PrivateSubnetA:
    Description: PrivateSubnetA
    Value: !Ref PrivateSubnetA
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnet-A"

  PrivateSubnetB:
    Description: PrivateSubnetB
    Value: !Ref PrivateSubnetB
    Export:
      Name: !Sub "${AWS::StackName}-Private-Subnet-B"

  TGWSubnetA:
    Description: TGWSubnetA ID
    Value: !Ref TGWSubnetA
    Export:
      Name: !Sub "${AWS::StackName}-TGW-Subnet-A"

  TGWSubnetB:
    Description: TGWSubnetB ID
    Value: !Ref TGWSubnetB
    Export:
      Name: !Sub "${AWS::StackName}-TGW-Subnet-B"

  PrivateAInstance1ID:
    Description: "Private A Instance 1 ID"
    Value: !Ref PrivateAInstance1
    Export:
      Name: !Sub "${AWS::StackName}-PrivateAInstance1ID"

  PrivateAInstance2ID:
    Description: "Private A Instance 2 ID"
    Value: !Ref PrivateAInstance2
    Export:
      Name: !Sub "${AWS::StackName}-PrivateAInstance2ID"

  PrivateBInstance1ID:
    Description: "Private B Instance 1 ID"
    Value: !Ref PrivateBInstance1
    Export:
      Name: !Sub "${AWS::StackName}-PrivateBInstance1ID"

  PrivateBInstance2ID:
    Description: "Private B Instance 2 ID"
    Value: !Ref PrivateBInstance2
    Export:
      Name: !Sub "${AWS::StackName}-PrivateBInstance2ID"

  PrivateSubnetARouteTable:
    Description: PrivateSubnetARouteTableID
    Value: !Ref PrivateSubnetARouteTable
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnetARouteTableID"

  PrivateSubnetBRouteTable:
    Description: PrivateSubnetBRouteTableID
    Value: !Ref PrivateSubnetBRouteTable
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnetBRouteTableID"

  PrivateAInstance1Ip:
    Description: PrivateAInstance1 Private IP
    Value: !GetAtt PrivateAInstance1.PrivateIp
    Export:
      Name: !Sub "${AWS::StackName}-PrivateAInstance1Ip"

  PrivateAInstance2Ip:
    Description: PrivateAInstance2 Private IP
    Value: !GetAtt PrivateAInstance2.PrivateIp
    Export:
      Name: !Sub "${AWS::StackName}-PrivateAInstance2Ip"

  PrivateBInstance1Ip:
    Description: PrivateBInstance1 Private IP
    Value: !GetAtt PrivateBInstance1.PrivateIp
    Export:
      Name: !Sub "${AWS::StackName}-PrivateBInstance1Ip"

  PrivateBInstance2Ip:
    Description: PrivateBInstance2 Private IP
    Value: !GetAtt PrivateBInstance2.PrivateIp
    Export:
      Name: !Sub "${AWS::StackName}-PrivateBInstance2Ip"